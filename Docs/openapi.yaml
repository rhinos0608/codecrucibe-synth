openapi: 3.0.3
info:
  title: CodeCrucible Synth API
  description: |
    Enterprise AI-powered code generation and analysis platform with multi-voice collaboration.
    
    ## Features
    - Multi-voice AI collaboration system
    - Real-time code generation and analysis
    - Project-aware context understanding
    - Enterprise security and compliance
    - WebSocket support for real-time interaction
    
    ## Authentication
    API key authentication required for production environments.
    
    ## Rate Limiting
    - General API: 1000 requests/minute per IP
    - Authentication: 5 requests/15 minutes per IP
    - Code Generation: 100 requests/minute per user
    
  version: 3.8.10
  contact:
    name: CodeCrucible Team
    url: https://codecrucible.dev
    email: support@codecrucible.dev
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.codecrucible.dev
    description: Production server
  - url: https://staging.codecrucible.dev
    description: Staging server
  - url: http://localhost:3002
    description: Local development server

security:
  - ApiKeyAuth: []
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Health Check
      description: Returns the health status of the API server and connected services
      tags:
        - System
      security: []
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                    description: Server uptime in seconds
                  version:
                    type: string
                  services:
                    type: object
                    properties:
                      modelProvider:
                        $ref: '#/components/schemas/ServiceStatus'
                      voiceSystem:
                        $ref: '#/components/schemas/ServiceStatus'
                      database:
                        $ref: '#/components/schemas/ServiceStatus'
              examples:
                healthy:
                  value:
                    status: healthy
                    timestamp: "2025-08-20T15:30:00Z"
                    uptime: 3600
                    version: "3.8.10"
                    services:
                      modelProvider:
                        status: connected
                        endpoint: "http://localhost:11434"
                      voiceSystem:
                        status: ready
                        voices: 10
                      database:
                        status: connected

  /api/model/status:
    get:
      summary: Model Provider Status
      description: Returns the status of the AI model provider connection
      tags:
        - Models
      responses:
        '200':
          description: Model provider status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [connected, disconnected, error]
                  provider:
                    type: string
                    enum: [ollama, lmstudio, openai, anthropic]
                  model:
                    type: string
                  endpoint:
                    type: string
                  latency:
                    type: number
                    description: Response latency in milliseconds

  /api/voices:
    get:
      summary: List Available Voices
      description: Returns information about all available AI voice archetypes
      tags:
        - Voices
      responses:
        '200':
          description: List of available voices
          content:
            application/json:
              schema:
                type: object
                properties:
                  voices:
                    type: array
                    items:
                      $ref: '#/components/schemas/Voice'
                  defaultVoices:
                    type: array
                    items:
                      type: string
                  totalCount:
                    type: integer

  /api/generate:
    post:
      summary: Generate Code
      description: |
        Generate code using AI with multi-voice collaboration.
        Supports various programming languages and frameworks.
      tags:
        - Code Generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateRequest'
            examples:
              simple:
                summary: Simple function generation
                value:
                  prompt: "Create a function to calculate fibonacci numbers"
                  language: "typescript"
                  voices: ["developer", "optimizer"]
              complex:
                summary: Full component with context
                value:
                  prompt: "Create a React component for user authentication"
                  language: "typescript"
                  framework: "react"
                  voices: ["developer", "security", "designer"]
                  context:
                    projectType: "web-app"
                    existingFiles: ["src/types/user.ts"]
      responses:
        '200':
          description: Code generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/analyze:
    post:
      summary: Analyze Code
      description: |
        Analyze code for quality, security, performance, and best practices.
        Uses multi-voice system for comprehensive analysis.
      tags:
        - Code Analysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeRequest'
      responses:
        '200':
          description: Analysis completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/RateLimited'

  /api/file/{operation}:
    post:
      summary: File Operations
      description: Perform file operations like read, write, create, delete
      tags:
        - File Operations
      parameters:
        - name: operation
          in: path
          required: true
          schema:
            type: string
            enum: [read, write, create, delete, list]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileOperationRequest'
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOperationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/project/scan:
    post:
      summary: Scan Project
      description: |
        Perform comprehensive project scanning and analysis.
        Identifies project structure, dependencies, and provides insights.
      tags:
        - Project Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectScanRequest'
      responses:
        '200':
          description: Project scan completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectScanResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/config:
    get:
      summary: Get Configuration
      description: Retrieve current API configuration and settings
      tags:
        - Configuration
      responses:
        '200':
          description: Current configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
    
    post:
      summary: Update Configuration
      description: Update API configuration settings
      tags:
        - Configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationUpdate'
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ServiceStatus:
      type: object
      properties:
        status:
          type: string
          enum: [connected, disconnected, error, ready]
        message:
          type: string
        lastCheck:
          type: string
          format: date-time

    Voice:
      type: object
      properties:
        id:
          type: string
          example: "developer"
        name:
          type: string
          example: "Developer"
        style:
          type: string
          example: "Practical and implementation-focused"
        temperature:
          type: number
          minimum: 0
          maximum: 2
          example: 0.7
        specialties:
          type: array
          items:
            type: string
          example: ["implementation", "debugging", "optimization"]
        description:
          type: string

    GenerateRequest:
      type: object
      required:
        - prompt
      properties:
        prompt:
          type: string
          description: The generation prompt
          example: "Create a TypeScript function to validate email addresses"
        language:
          type: string
          description: Target programming language
          example: "typescript"
        framework:
          type: string
          description: Framework or library context
          example: "react"
        voices:
          type: array
          items:
            type: string
          description: AI voices to use for generation
          example: ["developer", "security"]
        context:
          type: object
          description: Additional context for generation
          properties:
            projectType:
              type: string
            existingFiles:
              type: array
              items:
                type: string
            dependencies:
              type: array
              items:
                type: string
        options:
          type: object
          properties:
            temperature:
              type: number
              minimum: 0
              maximum: 2
            maxTokens:
              type: integer
              minimum: 1
              maximum: 8000
            stream:
              type: boolean

    GenerateResponse:
      type: object
      properties:
        success:
          type: boolean
        code:
          type: string
          description: Generated code
        language:
          type: string
        framework:
          type: string
        metadata:
          type: object
          properties:
            tokensUsed:
              type: integer
            generationTime:
              type: number
            voices:
              type: array
              items:
                type: object
                properties:
                  voice:
                    type: string
                  contribution:
                    type: string
        suggestions:
          type: array
          items:
            type: string
        documentation:
          type: string

    AnalyzeRequest:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: Code to analyze
        language:
          type: string
          description: Programming language
        filePath:
          type: string
          description: File path for context
        analysisTypes:
          type: array
          items:
            type: string
            enum: [quality, security, performance, style, complexity]
        voices:
          type: array
          items:
            type: string
          description: AI voices to use for analysis

    AnalyzeResponse:
      type: object
      properties:
        success:
          type: boolean
        analysis:
          type: object
          properties:
            overall:
              type: object
              properties:
                score:
                  type: number
                  minimum: 0
                  maximum: 100
                grade:
                  type: string
                  enum: [A, B, C, D, F]
            quality:
              $ref: '#/components/schemas/QualityAnalysis'
            security:
              $ref: '#/components/schemas/SecurityAnalysis'
            performance:
              $ref: '#/components/schemas/PerformanceAnalysis'
            style:
              $ref: '#/components/schemas/StyleAnalysis'
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/Suggestion'
        metadata:
          type: object
          properties:
            analysisTime:
              type: number
            tokensUsed:
              type: integer
            voices:
              type: array
              items:
                type: string

    QualityAnalysis:
      type: object
      properties:
        score:
          type: number
        metrics:
          type: object
          properties:
            complexity:
              type: number
            maintainability:
              type: number
            testability:
              type: number
        issues:
          type: array
          items:
            $ref: '#/components/schemas/Issue'

    SecurityAnalysis:
      type: object
      properties:
        score:
          type: number
        vulnerabilities:
          type: array
          items:
            $ref: '#/components/schemas/Vulnerability'
        riskLevel:
          type: string
          enum: [low, medium, high, critical]

    PerformanceAnalysis:
      type: object
      properties:
        score:
          type: number
        bottlenecks:
          type: array
          items:
            $ref: '#/components/schemas/Bottleneck'
        optimizations:
          type: array
          items:
            type: string

    StyleAnalysis:
      type: object
      properties:
        score:
          type: number
        violations:
          type: array
          items:
            $ref: '#/components/schemas/StyleViolation'
        standards:
          type: string
          example: "ESLint, Prettier"

    Issue:
      type: object
      properties:
        type:
          type: string
        severity:
          type: string
          enum: [low, medium, high, critical]
        line:
          type: integer
        column:
          type: integer
        message:
          type: string
        suggestion:
          type: string

    Vulnerability:
      type: object
      properties:
        type:
          type: string
        severity:
          type: string
          enum: [low, medium, high, critical]
        cwe:
          type: string
        description:
          type: string
        location:
          type: object
          properties:
            line:
              type: integer
            column:
              type: integer
        mitigation:
          type: string

    Bottleneck:
      type: object
      properties:
        type:
          type: string
        location:
          type: object
          properties:
            line:
              type: integer
            function:
              type: string
        impact:
          type: string
          enum: [low, medium, high]
        suggestion:
          type: string

    StyleViolation:
      type: object
      properties:
        rule:
          type: string
        line:
          type: integer
        column:
          type: integer
        message:
          type: string
        fixable:
          type: boolean

    Suggestion:
      type: object
      properties:
        type:
          type: string
          enum: [improvement, fix, optimization, security]
        priority:
          type: string
          enum: [low, medium, high, critical]
        title:
          type: string
        description:
          type: string
        code:
          type: string
        voice:
          type: string

    FileOperationRequest:
      type: object
      properties:
        path:
          type: string
          description: File path
        content:
          type: string
          description: File content (for write operations)
        encoding:
          type: string
          default: utf8
        options:
          type: object

    FileOperationResponse:
      type: object
      properties:
        success:
          type: boolean
        content:
          type: string
          description: File content (for read operations)
        metadata:
          type: object
          properties:
            size:
              type: integer
            modified:
              type: string
              format: date-time
            type:
              type: string

    ProjectScanRequest:
      type: object
      required:
        - path
      properties:
        path:
          type: string
          description: Project root path
        includeAnalysis:
          type: boolean
          default: true
        depth:
          type: integer
          minimum: 1
          maximum: 10
          default: 3

    ProjectScanResponse:
      type: object
      properties:
        success:
          type: boolean
        project:
          type: object
          properties:
            name:
              type: string
            type:
              type: string
            structure:
              type: object
            dependencies:
              type: array
              items:
                type: string
            analysis:
              type: object
              properties:
                complexity:
                  type: number
                quality:
                  type: number
                security:
                  type: number
        recommendations:
          type: array
          items:
            type: string

    Configuration:
      type: object
      properties:
        version:
          type: string
        environment:
          type: string
          enum: [development, staging, production]
        features:
          type: object
        models:
          type: object
        security:
          type: object
          properties:
            rateLimiting:
              type: boolean
            authentication:
              type: boolean

    ConfigurationUpdate:
      type: object
      properties:
        features:
          type: object
        security:
          type: object

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Bad Request"
            message: "Invalid request parameters"
            code: "INVALID_REQUEST"
            timestamp: "2025-08-20T15:30:00Z"
            requestId: "req_123456"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Unauthorized"
            message: "Invalid or missing API key"
            code: "UNAUTHORIZED"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Forbidden"
            message: "Insufficient permissions"
            code: "FORBIDDEN"

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Not Found"
            message: "Resource not found"
            code: "NOT_FOUND"

    RateLimited:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per time window
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests in current window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Time when rate limit resets (Unix timestamp)
        Retry-After:
          schema:
            type: integer
          description: Seconds to wait before retry
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Rate Limit Exceeded"
            message: "Too many requests, please try again later"
            code: "RATE_LIMITED"
            retryAfter: 60

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Internal Server Error"
            message: "An unexpected error occurred"
            code: "INTERNAL_ERROR"

tags:
  - name: System
    description: System health and status endpoints
  - name: Models
    description: AI model provider management
  - name: Voices
    description: AI voice archetype system
  - name: Code Generation
    description: AI-powered code generation
  - name: Code Analysis
    description: Code analysis and quality assessment
  - name: File Operations
    description: File system operations
  - name: Project Management
    description: Project scanning and management
  - name: Configuration
    description: API configuration management