Implement full-stack enforcement and real-time audit of generation permissions across CodeCrucible. Follow Transisthesis protocol standards: symbolic clarity, dual-channel validation, and structural containment.

---

## ðŸŽ¯ GOALS

1. **Restrict Code Generation Based on Subscription Plan**

- Block all unauthorized generation requests.
- Free users: allow only 3 generations/day, tracked server-side.
- Pro and Team users: unlimited generation.
- Enforce lockout on daily quota exhaustion.
- Return both programmatic error (JSON) and symbolic UI message:
  - JSON: `{ status: 403, reason: "generation_quota_exceeded" }`
  - UI: `"Your daily generation quota has been reached."`

2. **Integrate Real-Time Stripe Subscription Sync**

- Validate user subscription status before every generation.
- Webhooks: listen to `customer.subscription.created`, `updated`, `deleted`, `expired`.
- Update internal DB with accurate plan info (`plan`, `renewalDate`, `isActive`, `dailyQuota`, `usedToday`).
- Fallback state: treat unverified users as free-tier with zero quota.

3. **Security and Abuse Logging**

- Log all failed or anomalous generation attempts:
  - Missing auth/session
  - Quota spoofing
  - Header tampering
  - Unauthorized plan elevation
- Use central utility: `logSecurityEvent(details: SecurityLogEntry)`
- Include:
  - `userId`, `ipAddress`, `referrer`, `timestamp`, `errorType`, `planState`, `browserFingerprint`

4. **Frontend Enforcement and UI Guarding**

- Create `usePlanGuard()` hook to block gen button when quota exceeded.
- On generation attempt failure:
  - Disable button
  - Show inline error: `"Upgrade to continue generating code."`
- Reflect live plan status in UI (`Pro`, `Team`, or `Free (2/3 left)`)

---

## ðŸ”© FILE TARGETS

- `api/generate.ts`
- `middleware/enforcePlan.ts`
- `lib/stripe/updateUserPlan.ts`
- `lib/security/logSecurityEvent.ts`
- `hooks/usePlanGuard.ts`
- `components/UpgradeModal.tsx`
- `lib/utils/checkQuota.ts`

---

## ðŸ§° Implementation Constraints

- No assumptions about frontend state â€” all decisions server-verified.
- Fail-safe defaults:
  - Unknown users = zero generation rights.
  - API failure = deny generation, show fallback message.
- Do not expose internal logic to the client. Surface only symbolic UI errors.
- Maintain separation of concerns between:
  - Auth
  - Quota tracking
  - Stripe plan verification
  - UI restrictions

---

## âœ… Completion Criteria

- Each generation request is quota-validated before execution.
- Logs are written for every blocked or suspicious request.
- Subscription state is real-time accurate across all components.
- UI clearly reflects access status without relying on trust.

Follow all coding conventions from `AI_INSTRUCTIONS.md`.

Return modified files or implementation plan with integration points.
