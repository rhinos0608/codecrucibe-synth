# Production Docker Compose for CodeCrucible Synth
# Enterprise-grade configuration with monitoring, security, and scaling
version: '3.8'

services:
  # Main application service
  codecrucible-synth:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: codecrucible-synth
    restart: unless-stopped
    
    # Environment configuration
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - PORT=3002
      - REDIS_URL=redis://redis:6379
      - SMITHERY_API_KEY=${SMITHERY_API_KEY}
      
    # Port mapping
    ports:
      - "3002:3002"
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits for production stability
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Volume mounts for persistence
    volumes:
      - ./logs:/app/logs:rw
      - ./cache:/app/cache:rw
      - ./config:/app/config:ro
    
    # Network configuration
    networks:
      - codecrucible-network
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
      prometheus:
        condition: service_started

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: codecrucible-redis
    restart: unless-stopped
    
    # Redis configuration
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Data persistence
    volumes:
      - redis-data:/data
    
    networks:
      - codecrucible-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: codecrucible-prometheus
    restart: unless-stopped
    
    # Configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    networks:
      - codecrucible-network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: codecrucible-grafana
    restart: unless-stopped
    
    # Environment configuration
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    
    ports:
      - "3000:3000"
    
    # Dashboard configuration
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - codecrucible-network
    
    depends_on:
      - prometheus

  # Nginx reverse proxy for production load balancing
  nginx:
    image: nginx:alpine
    container_name: codecrucible-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    # Load balancer configuration
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    
    networks:
      - codecrucible-network
    
    depends_on:
      - codecrucible-synth
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Persistent volumes for data
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local

# Network configuration
networks:
  codecrucible-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16