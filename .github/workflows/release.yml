name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 2.0.1)'
        required: true
        type: string

env:
  NODE_VERSION: '18'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag: ${{ steps.get-version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version from tag or input
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${VERSION}"
          else
            TAG="${{ github.ref_name }}"
            VERSION="${TAG#v}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"
          echo "Release tag: ${TAG}"
          
      - name: Validate version format
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (e.g., 2.0.1)"
            exit 1
          fi

  test-before-release:
    name: Test Before Release
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run all tests
        run: |
          npm run lint
          npm test
          npm run build

  build-packages:
    name: Build Release Packages
    runs-on: ${{ matrix.os }}
    needs: [validate-release, test-before-release]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win
          - os: macos-latest
            platform: mac
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Build standalone package
        run: npm run package:${{ matrix.platform }}
        
      - name: Build desktop package (non-Windows)
        if: matrix.os != 'windows-latest'
        run: npm run desktop:package
        
      - name: Build desktop package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          npm run desktop:package
        env:
          CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
          
      - name: Upload standalone artifacts
        uses: actions/upload-artifact@v4
        with:
          name: standalone-${{ matrix.platform }}
          path: |
            build/standalone/*
          retention-days: 30
          
      - name: Upload desktop artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.platform }}
          path: |
            build/desktop/*
          retention-days: 30

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate-release, build-packages]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Update package version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          npm version $VERSION --no-git-tag-version
          
      - name: Build for production
        run: npm run build
        
      - name: Run final tests
        run: npm test
        
      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-packages, publish-npm]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          
      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          TAG="${{ needs.validate-release.outputs.tag }}"
          
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 $TAG^ 2>/dev/null || echo "")
          
          echo "## What's Changed in v${VERSION}" > release-notes.md
          echo "" >> release-notes.md
          
          if [ -n "$PREV_TAG" ]; then
            echo "### Commits since $PREV_TAG" >> release-notes.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..$TAG >> release-notes.md
          else
            echo "### Initial Release" >> release-notes.md
            echo "- Complete CodeCrucible Synth application" >> release-notes.md
          fi
          
          echo "" >> release-notes.md
          echo "### Downloads" >> release-notes.md
          echo "- **NPM Package**: \`npm install -g codecrucible-synth@${VERSION}\`" >> release-notes.md
          echo "- **Standalone Executables**: Download platform-specific binaries below" >> release-notes.md
          echo "- **Desktop Applications**: Download desktop apps for your platform below" >> release-notes.md
          
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy and rename artifacts
          if [ -d "release-artifacts/standalone-linux" ]; then
            cp release-artifacts/standalone-linux/* release-assets/ 2>/dev/null || true
          fi
          if [ -d "release-artifacts/standalone-win" ]; then
            cp release-artifacts/standalone-win/* release-assets/ 2>/dev/null || true
          fi
          if [ -d "release-artifacts/standalone-mac" ]; then
            cp release-artifacts/standalone-mac/* release-assets/ 2>/dev/null || true
          fi
          if [ -d "release-artifacts/desktop-linux" ]; then
            cp release-artifacts/desktop-linux/* release-assets/ 2>/dev/null || true
          fi
          if [ -d "release-artifacts/desktop-win" ]; then
            cp release-artifacts/desktop-win/* release-assets/ 2>/dev/null || true
          fi
          if [ -d "release-artifacts/desktop-mac" ]; then
            cp release-artifacts/desktop-mac/* release-assets/ 2>/dev/null || true
          fi
          
          ls -la release-assets/ || echo "No assets found"
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          release_name: CodeCrucible Synth v${{ needs.validate-release.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          
      - name: Upload Release Assets
        if: hashFiles('release-assets/*') != ''
        run: |
          for file in release-assets/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              curl \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "${{ steps.create-release.outputs.upload_url }}?name=$(basename $file)"
            fi
          done

  notify-release:
    name: Notify Release Complete
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: always()
    steps:
      - name: Release Success Notification
        if: needs.create-github-release.result == 'success'
        run: |
          echo "üéâ Release v${{ needs.validate-release.outputs.version }} completed successfully!"
          echo "üì¶ NPM: https://www.npmjs.com/package/codecrucible-synth"
          echo "üè∑Ô∏è GitHub: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.tag }}"
          
      - name: Release Failure Notification
        if: needs.create-github-release.result == 'failure'
        run: |
          echo "‚ùå Release v${{ needs.validate-release.outputs.version }} failed!"
          echo "Please check the workflow logs for details."
          exit 1