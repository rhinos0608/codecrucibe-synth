# GitHub Action - CodeCrucible Multi-Voice Code Review
# Following AI_INSTRUCTIONS.md security patterns and CodingPhilosophy.md consciousness principles

name: CodeCrucible Multi-Voice Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

env:
  CODECRUCIBLE_API_URL: ${{ secrets.CODECRUCIBLE_API_URL || 'https://api.codecrucible.com' }}
  CODECRUCIBLE_API_KEY: ${{ secrets.CODECRUCIBLE_API_KEY }}

jobs:
  multi-voice-review:
    runs-on: ubuntu-latest
    name: AI Council Code Review
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install CodeCrucible CLI
      run: |
        npm install -g @codecrucible/cli
        codecrucible --version
        
    - name: Authenticate with CodeCrucible
      run: |
        codecrucible auth --api-key "${{ env.CODECRUCIBLE_API_KEY }}" --platform github-actions
        
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          **/*.js
          **/*.ts
          **/*.jsx
          **/*.tsx
          **/*.py
          **/*.java
          **/*.go
          **/*.rs
          **/*.php
          **/*.rb
          **/*.cpp
          **/*.c
          **/*.h
          
    - name: Security Analysis with AI Council
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "🔒 Starting security analysis with AI council..."
        codecrucible analyze \
          --voices "Analyzer,Security Engineer" \
          --focus security \
          --files "${{ steps.changed-files.outputs.all_changed_files }}" \
          --output security-report.json
          
    - name: Performance Analysis
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "⚡ Starting performance analysis..."
        codecrucible analyze \
          --voices "Implementor,Performance Engineer" \
          --focus performance \
          --files "${{ steps.changed-files.outputs.all_changed_files }}" \
          --output performance-report.json
          
    - name: Code Quality Assessment
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "🏗️ Starting quality assessment..."
        codecrucible analyze \
          --voices "Maintainer,Systems Architect" \
          --focus quality \
          --files "${{ steps.changed-files.outputs.all_changed_files }}" \
          --output quality-report.json
          
    - name: UI/UX Review (Frontend files only)
      if: contains(steps.changed-files.outputs.all_changed_files, '.jsx') || contains(steps.changed-files.outputs.all_changed_files, '.tsx') || contains(steps.changed-files.outputs.all_changed_files, '.vue')
      run: |
        echo "🎨 Starting UI/UX review..."
        codecrucible analyze \
          --voices "Developer,UI/UX Engineer" \
          --focus ui-ux \
          --files "${{ steps.changed-files.outputs.all_changed_files }}" \
          --output ui-ux-report.json
          
    - name: Synthesize Council Recommendations
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "🔗 Synthesizing AI council recommendations..."
        codecrucible synthesize \
          --reports security-report.json performance-report.json quality-report.json ui-ux-report.json \
          --synthesis-goal comprehensive \
          --output council-synthesis.json
          
    - name: Generate Council Summary
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "📋 Generating council summary..."
        codecrucible summary \
          --synthesis council-synthesis.json \
          --format github-comment \
          --output council-comment.md
          
    - name: Post Council Review Comment
      if: steps.changed-files.outputs.any_changed == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const councilComment = fs.readFileSync('council-comment.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: councilComment
            });
            
            console.log('✅ Council review comment posted successfully');
          } catch (error) {
            console.error('Failed to post council comment:', error);
          }
          
    - name: Update Check Status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const conclusion = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          
          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'CodeCrucible AI Council Review',
            head_sha: context.sha,
            status: 'completed',
            conclusion: conclusion,
            output: {
              title: conclusion === 'success' ? 'AI Council Review Completed' : 'AI Council Review Failed',
              summary: conclusion === 'success' 
                ? 'Multi-voice AI analysis completed successfully. Check the PR comments for detailed recommendations.'
                : 'AI Council review encountered issues. Please check the workflow logs.'
            }
          });
          
    - name: Upload Council Reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: codecrucible-council-reports
        path: |
          *-report.json
          council-synthesis.json
          council-comment.md
        retention-days: 30
        
  consciousness-metrics:
    runs-on: ubuntu-latest
    name: Consciousness & Quality Tracking
    needs: multi-voice-review
    if: always()
    
    steps:
    - name: Download reports
      uses: actions/download-artifact@v3
      with:
        name: codecrucible-council-reports
        
    - name: Calculate Consciousness Metrics
      run: |
        echo "🧠 Calculating consciousness evolution metrics..."
        
        # Extract quality scores from reports
        SECURITY_SCORE=$(jq -r '.qualityScore // 0' security-report.json 2>/dev/null || echo "0")
        PERFORMANCE_SCORE=$(jq -r '.qualityScore // 0' performance-report.json 2>/dev/null || echo "0")
        QUALITY_SCORE=$(jq -r '.qualityScore // 0' quality-report.json 2>/dev/null || echo "0")
        
        # Calculate consciousness level (Jung's Descent Protocol)
        CONSCIOUSNESS_LEVEL=$(echo "scale=2; ($SECURITY_SCORE + $PERFORMANCE_SCORE + $QUALITY_SCORE) / 3" | bc -l)
        
        echo "Consciousness Metrics:"
        echo "  Security Awareness: $SECURITY_SCORE"
        echo "  Performance Mindfulness: $PERFORMANCE_SCORE"
        echo "  Quality Consciousness: $QUALITY_SCORE"
        echo "  Overall Consciousness Level: $CONSCIOUSNESS_LEVEL"
        
        # Set as environment variable for reporting
        echo "CONSCIOUSNESS_LEVEL=$CONSCIOUSNESS_LEVEL" >> $GITHUB_ENV
        
    - name: Report to CodeCrucible Analytics
      if: env.CODECRUCIBLE_API_KEY != ''
      run: |
        curl -X POST "${{ env.CODECRUCIBLE_API_URL }}/api/analytics/consciousness" \
          -H "Content-Type: application/json" \
          -H "x-codecrucible-api-key: ${{ env.CODECRUCIBLE_API_KEY }}" \
          -d '{
            "repository": "${{ github.repository }}",
            "sha": "${{ github.sha }}",
            "consciousness_level": '${{ env.CONSCIOUSNESS_LEVEL }}',
            "voices_used": ["Analyzer", "Security Engineer", "Implementor", "Performance Engineer", "Maintainer", "Systems Architect"],
            "analysis_type": "github_action",
            "timestamp": "'$(date -Iseconds)'"
          }'