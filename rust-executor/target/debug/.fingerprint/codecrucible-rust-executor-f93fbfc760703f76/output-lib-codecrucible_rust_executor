{"$message_type":"diagnostic","message":"Only fn in impl block can be marked as factory, constructor, getter or setter","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":2424,"byte_end":2427,"line_start":82,"line_end":82,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new() -> NapiResult<Self> {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0msrc\\lib.rs:82:12: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m: Only fn in impl block can be marked as factory, constructor, getter or setter\u001b[0m\n"}
{"$message_type":"diagnostic","message":"arguments cannot be `self`","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":3262,"byte_end":3267,"line_start":107,"line_end":107,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn get_id(&self) -> String {","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0msrc\\lib.rs:107:19: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m: arguments cannot be `self`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"arguments cannot be `self`","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":3400,"byte_end":3409,"line_start":113,"line_end":113,"column_start":23,"column_end":32,"is_primary":true,"text":[{"text":"    pub fn initialize(&mut self) -> NapiResult<bool> {","highlight_start":23,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0msrc\\lib.rs:113:23: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m: arguments cannot be `self`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"arguments cannot be `self`","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":3788,"byte_end":3793,"line_start":126,"line_end":126,"column_start":26,"column_end":31,"is_primary":true,"text":[{"text":"    pub async fn execute(&self, tool_id: String, arguments: String, options: Option<ExecutionOptions>) -> NapiResult<ExecutionResult> {","highlight_start":26,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0msrc\\lib.rs:126:26: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m: arguments cannot be `self`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"arguments cannot be `self`","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":6297,"byte_end":6302,"line_start":187,"line_end":187,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"    pub async fn execute_filesystem(&self, operation: String, path: String, content: Option<String>, options: Option<ExecutionOptions>) -> NapiResult<ExecutionResult> {","highlight_start":37,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0msrc\\lib.rs:187:37: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m: arguments cannot be `self`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"arguments cannot be `self`","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":7108,"byte_end":7113,"line_start":204,"line_end":204,"column_start":34,"column_end":39,"is_primary":true,"text":[{"text":"    pub async fn execute_command(&self, command: String, args: Vec<String>, options: Option<ExecutionOptions>) -> NapiResult<ExecutionResult> {","highlight_start":34,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0msrc\\lib.rs:204:34: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m: arguments cannot be `self`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"arguments cannot be `self`","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":7844,"byte_end":7849,"line_start":219,"line_end":219,"column_start":42,"column_end":47,"is_primary":true,"text":[{"text":"    pub async fn get_performance_metrics(&self) -> NapiResult<String> {","highlight_start":42,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0msrc\\lib.rs:219:42: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m: arguments cannot be `self`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"arguments cannot be `self`","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":8165,"byte_end":8170,"line_start":227,"line_end":227,"column_start":44,"column_end":49,"is_primary":true,"text":[{"text":"    pub async fn reset_performance_metrics(&self) -> NapiResult<()> {","highlight_start":44,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0msrc\\lib.rs:227:44: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m: arguments cannot be `self`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"arguments cannot be `self`","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":8413,"byte_end":8418,"line_start":235,"line_end":235,"column_start":31,"column_end":36,"is_primary":true,"text":[{"text":"    pub async fn health_check(&self) -> NapiResult<String> {","highlight_start":31,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0msrc\\lib.rs:235:31: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m: arguments cannot be `self`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"arguments cannot be `self`","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":8901,"byte_end":8906,"line_start":252,"line_end":252,"column_start":32,"column_end":37,"is_primary":true,"text":[{"text":"    pub fn get_supported_tools(&self) -> NapiResult<Vec<String>> {","highlight_start":32,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0msrc\\lib.rs:252:32: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m: arguments cannot be `self`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"arguments cannot be `self`","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":9139,"byte_end":9144,"line_start":261,"line_end":261,"column_start":38,"column_end":43,"is_primary":true,"text":[{"text":"    pub fn get_filesystem_operations(&self) -> NapiResult<Vec<String>> {","highlight_start":38,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0msrc\\lib.rs:261:38: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m: arguments cannot be `self`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"arguments cannot be `self`","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":9581,"byte_end":9586,"line_start":276,"line_end":276,"column_start":35,"column_end":40,"is_primary":true,"text":[{"text":"    pub fn get_supported_commands(&self) -> NapiResult<Vec<String>> {","highlight_start":35,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0msrc\\lib.rs:276:35: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m: arguments cannot be `self`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"arguments cannot be `self`","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":10352,"byte_end":10357,"line_start":290,"line_end":290,"column_start":26,"column_end":31,"is_primary":true,"text":[{"text":"    pub async fn cleanup(&self) -> NapiResult<()> {","highlight_start":26,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0msrc\\lib.rs:290:26: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m: arguments cannot be `self`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused imports: `debug`, `error`, and `warn`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\lib.rs","byte_start":167,"byte_end":172,"line_start":7,"line_end":7,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"use tracing::{info, error, warn, debug};","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lib.rs","byte_start":174,"byte_end":178,"line_start":7,"line_end":7,"column_start":28,"column_end":32,"is_primary":true,"text":[{"text":"use tracing::{info, error, warn, debug};","highlight_start":28,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lib.rs","byte_start":180,"byte_end":185,"line_start":7,"line_end":7,"column_start":34,"column_end":39,"is_primary":true,"text":[{"text":"use tracing::{info, error, warn, debug};","highlight_start":34,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src\\lib.rs","byte_start":165,"byte_end":185,"line_start":7,"line_end":7,"column_start":19,"column_end":39,"is_primary":true,"text":[{"text":"use tracing::{info, error, warn, debug};","highlight_start":19,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\lib.rs","byte_start":160,"byte_end":161,"line_start":7,"line_end":7,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"use tracing::{info, error, warn, debug};","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\lib.rs","byte_start":185,"byte_end":186,"line_start":7,"line_end":7,"column_start":39,"column_end":40,"is_primary":true,"text":[{"text":"use tracing::{info, error, warn, debug};","highlight_start":39,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\lib.rs:7:21: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused imports: `debug`, `error`, and `warn`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused import: `ResourceLimits`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":144,"byte_end":158,"line_start":4,"line_end":4,"column_start":44,"column_end":58,"is_primary":true,"text":[{"text":"use super::capabilities::{SecurityContext, ResourceLimits, SecurityError};","highlight_start":44,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":142,"byte_end":158,"line_start":4,"line_end":4,"column_start":42,"column_end":58,"is_primary":true,"text":[{"text":"use super::capabilities::{SecurityContext, ResourceLimits, SecurityError};","highlight_start":42,"highlight_end":58}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\security\\isolation.rs:4:44: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused import: `ResourceLimits`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused imports: `CreateProcessW`, `PROCESS_INFORMATION`, and `STARTUPINFOW`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":503,"byte_end":517,"line_start":17,"line_end":17,"column_start":37,"column_end":51,"is_primary":true,"text":[{"text":"use winapi::um::processthreadsapi::{CreateProcessW, PROCESS_INFORMATION, STARTUPINFOW};","highlight_start":37,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\security\\isolation.rs","byte_start":519,"byte_end":538,"line_start":17,"line_end":17,"column_start":53,"column_end":72,"is_primary":true,"text":[{"text":"use winapi::um::processthreadsapi::{CreateProcessW, PROCESS_INFORMATION, STARTUPINFOW};","highlight_start":53,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\security\\isolation.rs","byte_start":540,"byte_end":552,"line_start":17,"line_end":17,"column_start":74,"column_end":86,"is_primary":true,"text":[{"text":"use winapi::um::processthreadsapi::{CreateProcessW, PROCESS_INFORMATION, STARTUPINFOW};","highlight_start":74,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":450,"byte_end":556,"line_start":16,"line_end":18,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"#[cfg(windows)]","highlight_start":1,"highlight_end":16},{"text":"use winapi::um::processthreadsapi::{CreateProcessW, PROCESS_INFORMATION, STARTUPINFOW};","highlight_start":1,"highlight_end":88},{"text":"#[cfg(windows)]","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\security\\isolation.rs:17:37: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused imports: `CreateProcessW`, `PROCESS_INFORMATION`, and `STARTUPINFOW`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused imports: `AssignProcessToJobObject` and `CreateJobObjectW`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":599,"byte_end":615,"line_start":19,"line_end":19,"column_start":27,"column_end":43,"is_primary":true,"text":[{"text":"use winapi::um::jobapi2::{CreateJobObjectW, AssignProcessToJobObject};","highlight_start":27,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\security\\isolation.rs","byte_start":617,"byte_end":641,"line_start":19,"line_end":19,"column_start":45,"column_end":69,"is_primary":true,"text":[{"text":"use winapi::um::jobapi2::{CreateJobObjectW, AssignProcessToJobObject};","highlight_start":45,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":556,"byte_end":645,"line_start":18,"line_end":20,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"#[cfg(windows)]","highlight_start":1,"highlight_end":16},{"text":"use winapi::um::jobapi2::{CreateJobObjectW, AssignProcessToJobObject};","highlight_start":1,"highlight_end":71},{"text":"#[cfg(windows)]","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\security\\isolation.rs:19:27: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused imports: `AssignProcessToJobObject` and `CreateJobObjectW`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused import: `winapi::um::handleapi::CloseHandle`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":666,"byte_end":700,"line_start":21,"line_end":21,"column_start":5,"column_end":39,"is_primary":true,"text":[{"text":"use winapi::um::handleapi::CloseHandle;","highlight_start":5,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":645,"byte_end":703,"line_start":20,"line_end":22,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"#[cfg(windows)]","highlight_start":1,"highlight_end":16},{"text":"use winapi::um::handleapi::CloseHandle;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\security\\isolation.rs:21:5: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused import: `winapi::um::handleapi::CloseHandle`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused import: `BufReader`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":29,"byte_end":38,"line_start":1,"line_end":1,"column_start":30,"column_end":39,"is_primary":true,"text":[{"text":"use std::io::{self, BufRead, BufReader, Write};","highlight_start":30,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":27,"byte_end":38,"line_start":1,"line_end":1,"column_start":28,"column_end":39,"is_primary":true,"text":[{"text":"use std::io::{self, BufRead, BufReader, Write};","highlight_start":28,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\protocol\\communication.rs:1:30: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused import: `BufReader`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused imports: `ErrorPayload`, `HealthCheckPayload`, `HeartbeatPayload`, and `StreamUpdate`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":363,"byte_end":375,"line_start":11,"line_end":11,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    StreamUpdate, ErrorPayload, ErrorInfo, ErrorCategory, HeartbeatPayload, HealthCheckPayload,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\protocol\\communication.rs","byte_start":377,"byte_end":389,"line_start":11,"line_end":11,"column_start":19,"column_end":31,"is_primary":true,"text":[{"text":"    StreamUpdate, ErrorPayload, ErrorInfo, ErrorCategory, HeartbeatPayload, HealthCheckPayload,","highlight_start":19,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\protocol\\communication.rs","byte_start":417,"byte_end":433,"line_start":11,"line_end":11,"column_start":59,"column_end":75,"is_primary":true,"text":[{"text":"    StreamUpdate, ErrorPayload, ErrorInfo, ErrorCategory, HeartbeatPayload, HealthCheckPayload,","highlight_start":59,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\protocol\\communication.rs","byte_start":435,"byte_end":453,"line_start":11,"line_end":11,"column_start":77,"column_end":95,"is_primary":true,"text":[{"text":"    StreamUpdate, ErrorPayload, ErrorInfo, ErrorCategory, HeartbeatPayload, HealthCheckPayload,","highlight_start":77,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":356,"byte_end":389,"line_start":10,"line_end":11,"column_start":87,"column_end":31,"is_primary":true,"text":[{"text":"    ExecutionMessage, MessageType, MessagePayload, ExecutionRequest, ExecutionResponse,","highlight_start":87,"highlight_end":88},{"text":"    StreamUpdate, ErrorPayload, ErrorInfo, ErrorCategory, HeartbeatPayload, HealthCheckPayload,","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\protocol\\communication.rs","byte_start":415,"byte_end":453,"line_start":11,"line_end":11,"column_start":57,"column_end":95,"is_primary":true,"text":[{"text":"    StreamUpdate, ErrorPayload, ErrorInfo, ErrorCategory, HeartbeatPayload, HealthCheckPayload,","highlight_start":57,"highlight_end":95}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\protocol\\communication.rs:11:5: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused imports: `ErrorPayload`, `HealthCheckPayload`, `HeartbeatPayload`, and `StreamUpdate`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused import: `FileSystemError`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":546,"byte_end":561,"line_start":14,"line_end":14,"column_start":56,"column_end":71,"is_primary":true,"text":[{"text":"use crate::executors::filesystem::{FileSystemExecutor, FileSystemError};","highlight_start":56,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":544,"byte_end":561,"line_start":14,"line_end":14,"column_start":54,"column_end":71,"is_primary":true,"text":[{"text":"use crate::executors::filesystem::{FileSystemExecutor, FileSystemError};","highlight_start":54,"highlight_end":71}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\protocol\\communication.rs","byte_start":525,"byte_end":526,"line_start":14,"line_end":14,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"use crate::executors::filesystem::{FileSystemExecutor, FileSystemError};","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\protocol\\communication.rs","byte_start":561,"byte_end":562,"line_start":14,"line_end":14,"column_start":71,"column_end":72,"is_primary":true,"text":[{"text":"use crate::executors::filesystem::{FileSystemExecutor, FileSystemError};","highlight_start":71,"highlight_end":72}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\protocol\\communication.rs:14:56: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused import: `FileSystemError`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `filesystem_permissions`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"src\\executors\\filesystem.rs","byte_start":17011,"byte_end":17045,"line_start":460,"line_end":460,"column_start":7,"column_end":41,"is_primary":true,"text":[{"text":"#[cfg(feature = \"filesystem_permissions\")]","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"no expected values for `feature`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `filesystem_permissions` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the condition","code":null,"level":"help","spans":[{"file_name":"src\\executors\\filesystem.rs","byte_start":17011,"byte_end":17045,"line_start":460,"line_end":460,"column_start":7,"column_end":41,"is_primary":true,"text":[{"text":"#[cfg(feature = \"filesystem_permissions\")]","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\executors\\filesystem.rs:460:7: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unexpected `cfg` condition value: `filesystem_permissions`: help: remove the condition\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `filesystem_permissions`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"src\\executors\\filesystem.rs","byte_start":17101,"byte_end":17135,"line_start":463,"line_end":463,"column_start":11,"column_end":45,"is_primary":true,"text":[{"text":"#[cfg(not(feature = \"filesystem_permissions\"))]","highlight_start":11,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"no expected values for `feature`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `filesystem_permissions` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the condition","code":null,"level":"help","spans":[{"file_name":"src\\executors\\filesystem.rs","byte_start":17101,"byte_end":17135,"line_start":463,"line_end":463,"column_start":11,"column_end":45,"is_primary":true,"text":[{"text":"#[cfg(not(feature = \"filesystem_permissions\"))]","highlight_start":11,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\executors\\filesystem.rs:463:11: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unexpected `cfg` condition value: `filesystem_permissions`: help: remove the condition\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `filesystem_permissions`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"src\\executors\\filesystem.rs","byte_start":17207,"byte_end":17241,"line_start":468,"line_end":468,"column_start":11,"column_end":45,"is_primary":true,"text":[{"text":"#[cfg(not(feature = \"filesystem_permissions\"))]","highlight_start":11,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"no expected values for `feature`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `filesystem_permissions` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the condition","code":null,"level":"help","spans":[{"file_name":"src\\executors\\filesystem.rs","byte_start":17207,"byte_end":17241,"line_start":468,"line_end":468,"column_start":11,"column_end":45,"is_primary":true,"text":[{"text":"#[cfg(not(feature = \"filesystem_permissions\"))]","highlight_start":11,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\executors\\filesystem.rs:468:11: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unexpected `cfg` condition value: `filesystem_permissions`: help: remove the condition\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused import: `Read`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\executors\\filesystem.rs","byte_start":61,"byte_end":65,"line_start":3,"line_end":3,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"use std::io::{Read, Write};","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\executors\\filesystem.rs","byte_start":61,"byte_end":67,"line_start":3,"line_end":3,"column_start":15,"column_end":21,"is_primary":true,"text":[{"text":"use std::io::{Read, Write};","highlight_start":15,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\executors\\filesystem.rs","byte_start":60,"byte_end":61,"line_start":3,"line_end":3,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"use std::io::{Read, Write};","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\executors\\filesystem.rs","byte_start":72,"byte_end":73,"line_start":3,"line_end":3,"column_start":26,"column_end":27,"is_primary":true,"text":[{"text":"use std::io::{Read, Write};","highlight_start":26,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\executors\\filesystem.rs:3:15: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused import: `Read`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused import: `tokio::fs as async_fs`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\executors\\filesystem.rs","byte_start":118,"byte_end":139,"line_start":5,"line_end":5,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"use tokio::fs as async_fs;","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\executors\\filesystem.rs","byte_start":114,"byte_end":142,"line_start":5,"line_end":6,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use tokio::fs as async_fs;","highlight_start":1,"highlight_end":27},{"text":"use crate::security::{SecurityContext, SecurityError, ProcessIsolation, IsolationError};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\executors\\filesystem.rs:5:5: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused import: `tokio::fs as async_fs`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused import: `Path`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\executors\\command.rs","byte_start":122,"byte_end":126,"line_start":4,"line_end":4,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"use std::path::{Path, PathBuf};","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\executors\\command.rs","byte_start":122,"byte_end":128,"line_start":4,"line_end":4,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"use std::path::{Path, PathBuf};","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\executors\\command.rs","byte_start":121,"byte_end":122,"line_start":4,"line_end":4,"column_start":16,"column_end":17,"is_primary":true,"text":[{"text":"use std::path::{Path, PathBuf};","highlight_start":16,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\executors\\command.rs","byte_start":135,"byte_end":136,"line_start":4,"line_end":4,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"use std::path::{Path, PathBuf};","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\executors\\command.rs:4:17: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused import: `Path`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused import: `tokio::time::timeout`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\executors\\command.rs","byte_start":181,"byte_end":201,"line_start":6,"line_end":6,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"use tokio::time::timeout;","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\executors\\command.rs","byte_start":177,"byte_end":204,"line_start":6,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use tokio::time::timeout;","highlight_start":1,"highlight_end":26},{"text":"use regex::Regex;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\executors\\command.rs:6:5: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused import: `tokio::time::timeout`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused imports: `Capability` and `SecurityContext`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\lib.rs","byte_start":347,"byte_end":362,"line_start":16,"line_end":16,"column_start":23,"column_end":38,"is_primary":true,"text":[{"text":"use crate::security::{SecurityContext, Capability};","highlight_start":23,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lib.rs","byte_start":364,"byte_end":374,"line_start":16,"line_end":16,"column_start":40,"column_end":50,"is_primary":true,"text":[{"text":"use crate::security::{SecurityContext, Capability};","highlight_start":40,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\lib.rs","byte_start":325,"byte_end":377,"line_start":16,"line_end":17,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::security::{SecurityContext, Capability};","highlight_start":1,"highlight_end":52},{"text":"use crate::protocol::messages::{ExecutionMessage, MessageType, MessagePayload, ExecutionRequest, ExecutionContext, SecurityLevel as ProtocolSecurityLevel, ResourceLimitConfig};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\lib.rs:16:23: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused imports: `Capability` and `SecurityContext`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused imports: `ExecutionMessage`, `ExecutionRequest`, `MessagePayload`, and `MessageType`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\lib.rs","byte_start":409,"byte_end":425,"line_start":17,"line_end":17,"column_start":33,"column_end":49,"is_primary":true,"text":[{"text":"use crate::protocol::messages::{ExecutionMessage, MessageType, MessagePayload, ExecutionRequest, ExecutionContext, SecurityLevel as ProtocolSecurityLevel, ResourceLimitConfig};","highlight_start":33,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lib.rs","byte_start":427,"byte_end":438,"line_start":17,"line_end":17,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"use crate::protocol::messages::{ExecutionMessage, MessageType, MessagePayload, ExecutionRequest, ExecutionContext, SecurityLevel as ProtocolSecurityLevel, ResourceLimitConfig};","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lib.rs","byte_start":440,"byte_end":454,"line_start":17,"line_end":17,"column_start":64,"column_end":78,"is_primary":true,"text":[{"text":"use crate::protocol::messages::{ExecutionMessage, MessageType, MessagePayload, ExecutionRequest, ExecutionContext, SecurityLevel as ProtocolSecurityLevel, ResourceLimitConfig};","highlight_start":64,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lib.rs","byte_start":456,"byte_end":472,"line_start":17,"line_end":17,"column_start":80,"column_end":96,"is_primary":true,"text":[{"text":"use crate::protocol::messages::{ExecutionMessage, MessageType, MessagePayload, ExecutionRequest, ExecutionContext, SecurityLevel as ProtocolSecurityLevel, ResourceLimitConfig};","highlight_start":80,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src\\lib.rs","byte_start":409,"byte_end":474,"line_start":17,"line_end":17,"column_start":33,"column_end":98,"is_primary":true,"text":[{"text":"use crate::protocol::messages::{ExecutionMessage, MessageType, MessagePayload, ExecutionRequest, ExecutionContext, SecurityLevel as ProtocolSecurityLevel, ResourceLimitConfig};","highlight_start":33,"highlight_end":98}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\lib.rs:17:33: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused imports: `ExecutionMessage`, `ExecutionRequest`, `MessagePayload`, and `MessageType`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused import: `ExecutorRegistry`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\lib.rs","byte_start":613,"byte_end":629,"line_start":18,"line_end":18,"column_start":60,"column_end":76,"is_primary":true,"text":[{"text":"use crate::protocol::communication::{CommunicationHandler, ExecutorRegistry};","highlight_start":60,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\lib.rs","byte_start":611,"byte_end":629,"line_start":18,"line_end":18,"column_start":58,"column_end":76,"is_primary":true,"text":[{"text":"use crate::protocol::communication::{CommunicationHandler, ExecutorRegistry};","highlight_start":58,"highlight_end":76}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\lib.rs","byte_start":590,"byte_end":591,"line_start":18,"line_end":18,"column_start":37,"column_end":38,"is_primary":true,"text":[{"text":"use crate::protocol::communication::{CommunicationHandler, ExecutorRegistry};","highlight_start":37,"highlight_end":38}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\lib.rs","byte_start":629,"byte_end":630,"line_start":18,"line_end":18,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"use crate::protocol::communication::{CommunicationHandler, ExecutorRegistry};","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\lib.rs:18:60: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused import: `ExecutorRegistry`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused import: `crate::executors::filesystem::FileSystemExecutor`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\lib.rs","byte_start":636,"byte_end":684,"line_start":19,"line_end":19,"column_start":5,"column_end":53,"is_primary":true,"text":[{"text":"use crate::executors::filesystem::FileSystemExecutor;","highlight_start":5,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\lib.rs","byte_start":632,"byte_end":686,"line_start":19,"line_end":20,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::executors::filesystem::FileSystemExecutor;","highlight_start":1,"highlight_end":54},{"text":"use crate::executors::command::CommandExecutor;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\lib.rs:19:5: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused import: `crate::executors::filesystem::FileSystemExecutor`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused import: `crate::executors::command::CommandExecutor`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\lib.rs","byte_start":690,"byte_end":732,"line_start":20,"line_end":20,"column_start":5,"column_end":47,"is_primary":true,"text":[{"text":"use crate::executors::command::CommandExecutor;","highlight_start":5,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\lib.rs","byte_start":686,"byte_end":734,"line_start":20,"line_end":21,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::executors::command::CommandExecutor;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\lib.rs:20:5: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused import: `crate::executors::command::CommandExecutor`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused variable: `start_time`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":3743,"byte_end":3753,"line_start":108,"line_end":108,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"        let start_time = Instant::now();","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":3743,"byte_end":3753,"line_start":108,"line_end":108,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"        let start_time = Instant::now();","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":"_start_time","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\security\\isolation.rs:108:13: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused variable: `start_time`: help: if this is intentional, prefix it with an underscore: `_start_time`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"the parameter type `F` may not live long enough","code":{"code":"E0310","explanation":"A parameter type is missing a lifetime constraint or has a lifetime that\ndoes not live long enough.\n\nErroneous code example:\n\n```compile_fail,E0310\n// This won't compile because T is not constrained to the static lifetime\n// the reference needs\nstruct Foo<T> {\n    foo: &'static T\n}\n```\n\nType parameters in type definitions have lifetimes associated with them that\nrepresent how long the data stored within them is guaranteed to live. This\nlifetime must be as long as the data needs to be alive, and missing the\nconstraint that denotes this will cause this error.\n\nThis will compile, because it has the constraint on the type parameter:\n\n```\nstruct Foo<T: 'static> {\n    foo: &'static T\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":4083,"byte_end":4131,"line_start":116,"line_end":116,"column_start":13,"column_end":61,"is_primary":true,"text":[{"text":"            tokio::task::spawn_blocking(move || operation()).await","highlight_start":13,"highlight_end":61}],"label":"the parameter type `F` must be valid for the static lifetime...","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\security\\isolation.rs","byte_start":4083,"byte_end":4131,"line_start":116,"line_end":116,"column_start":13,"column_end":61,"is_primary":true,"text":[{"text":"            tokio::task::spawn_blocking(move || operation()).await","highlight_start":13,"highlight_end":61}],"label":"...so that the type `F` will meet its required lifetime bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider adding an explicit lifetime bound","code":null,"level":"help","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":3459,"byte_end":3459,"line_start":101,"line_end":101,"column_start":56,"column_end":56,"is_primary":true,"text":[{"text":"        F: FnOnce() -> Result<R, IsolationError> + Send,","highlight_start":56,"highlight_end":56}],"label":null,"suggested_replacement":" + 'static","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\security\\isolation.rs:116:13: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror[E0310]\u001b[0m\u001b[0m: the parameter type `F` may not live long enough: the parameter type `F` must be valid for the static lifetime..., ...so that the type `F` will meet its required lifetime bounds\u001b[0m\n"}
{"$message_type":"diagnostic","message":"the parameter type `F` may not live long enough","code":{"code":"E0311","explanation":"This error occurs when there is an unsatisfied outlives bound involving an\nelided region and a generic type parameter or associated type.\n\nErroneous code example:\n\n```compile_fail,E0311\nfn no_restriction<T>(x: &()) -> &() {\n    with_restriction::<T>(x)\n}\n\nfn with_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n    x\n}\n```\n\nWhy doesn't this code compile? It helps to look at the lifetime bounds that are\nautomatically added by the compiler. For more details see the documentation for\n[lifetime elision]( https://doc.rust-lang.org/reference/lifetime-elision.html).\n\nThe compiler elides the lifetime of `x` and the return type to some arbitrary\nlifetime `'anon` in `no_restriction()`. The only information available to the\ncompiler is that `'anon` is valid for the duration of the function. When\ncalling `with_restriction()`, the compiler requires the completely unrelated\ntype parameter `T` to outlive `'anon` because of the `T: 'a` bound in\n`with_restriction()`. This causes an error because `T` is not required to\noutlive `'anon` in `no_restriction()`.\n\nIf `no_restriction()` were to use `&T` instead of `&()` as an argument, the\ncompiler would have added an implied bound, causing this to compile.\n\nThis error can be resolved by explicitly naming the elided lifetime for `x` and\nthen explicitly requiring that the generic parameter `T` outlives that lifetime:\n\n```\nfn no_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n    with_restriction::<T>(x)\n}\n\nfn with_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n    x\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":3342,"byte_end":3347,"line_start":99,"line_end":99,"column_start":45,"column_end":50,"is_primary":false,"text":[{"text":"    async fn execute_isolated_windows<F, R>(&self, operation: F) -> Result<R, IsolationError>","highlight_start":45,"highlight_end":50}],"label":"the parameter type `F` must be valid for the anonymous lifetime defined here...","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\security\\isolation.rs","byte_start":4083,"byte_end":4131,"line_start":116,"line_end":116,"column_start":13,"column_end":61,"is_primary":true,"text":[{"text":"            tokio::task::spawn_blocking(move || operation()).await","highlight_start":13,"highlight_end":61}],"label":"...so that the type `F` will meet its required lifetime bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider adding an explicit lifetime bound","code":null,"level":"help","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":3343,"byte_end":3343,"line_start":99,"line_end":99,"column_start":46,"column_end":46,"is_primary":true,"text":[{"text":"    async fn execute_isolated_windows<F, R>(&self, operation: F) -> Result<R, IsolationError>","highlight_start":46,"highlight_end":46}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\security\\isolation.rs","byte_start":3336,"byte_end":3336,"line_start":99,"line_end":99,"column_start":39,"column_end":39,"is_primary":true,"text":[{"text":"    async fn execute_isolated_windows<F, R>(&self, operation: F) -> Result<R, IsolationError>","highlight_start":39,"highlight_end":39}],"label":null,"suggested_replacement":"'a, ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\security\\isolation.rs","byte_start":3459,"byte_end":3459,"line_start":101,"line_end":101,"column_start":56,"column_end":56,"is_primary":true,"text":[{"text":"        F: FnOnce() -> Result<R, IsolationError> + Send,","highlight_start":56,"highlight_end":56}],"label":null,"suggested_replacement":" + 'a","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\security\\isolation.rs:116:13: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror[E0311]\u001b[0m\u001b[0m: the parameter type `F` may not live long enough: ...so that the type `F` will meet its required lifetime bounds\u001b[0m\n"}
{"$message_type":"diagnostic","message":"`Result<Output, std::io::Error>` is not a future","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":10763,"byte_end":10787,"line_start":294,"line_end":294,"column_start":48,"column_end":72,"is_primary":true,"text":[{"text":"        let output = timeout(timeout_duration, child.wait_with_output()).await","highlight_start":48,"highlight_end":72}],"label":"`Result<Output, std::io::Error>` is not a future","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\security\\isolation.rs","byte_start":10737,"byte_end":10744,"line_start":294,"line_end":294,"column_start":22,"column_end":29,"is_primary":false,"text":[{"text":"        let output = timeout(timeout_duration, child.wait_with_output()).await","highlight_start":22,"highlight_end":29}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::future::Future` is not implemented for `Result<Output, std::io::Error>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"Result<Output, std::io::Error> must be a future or must implement `IntoFuture` to be awaited","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Result<Output, std::io::Error>` to implement `IntoFuture`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `timeout`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.47.1\\src\\time\\timeout.rs","byte_start":2874,"byte_end":2881,"line_start":86,"line_end":86,"column_start":8,"column_end":15,"is_primary":false,"text":[{"text":"pub fn timeout<F>(duration: Duration, future: F) -> Timeout<F::IntoFuture>","highlight_start":8,"highlight_end":15}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.47.1\\src\\time\\timeout.rs","byte_start":2955,"byte_end":2965,"line_start":88,"line_end":88,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    F: IntoFuture,","highlight_start":8,"highlight_end":18}],"label":"required by this bound in `timeout`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\security\\isolation.rs:294:48: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m: `Result<Output, std::io::Error>` is not a future: `Result<Output, std::io::Error>` is not a future\u001b[0m\n"}
{"$message_type":"diagnostic","message":"`Result<Output, std::io::Error>` is not a future","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":10789,"byte_end":10794,"line_start":294,"line_end":294,"column_start":74,"column_end":79,"is_primary":true,"text":[{"text":"        let output = timeout(timeout_duration, child.wait_with_output()).await","highlight_start":74,"highlight_end":79}],"label":"`Result<Output, std::io::Error>` is not a future","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\security\\isolation.rs","byte_start":10789,"byte_end":10794,"line_start":294,"line_end":294,"column_start":74,"column_end":79,"is_primary":false,"text":[{"text":"        let output = timeout(timeout_duration, child.wait_with_output()).await","highlight_start":74,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\security\\isolation.rs","byte_start":10737,"byte_end":10788,"line_start":294,"line_end":294,"column_start":22,"column_end":73,"is_primary":false,"text":[{"text":"        let output = timeout(timeout_duration, child.wait_with_output()).await","highlight_start":22,"highlight_end":73}],"label":"this call returns `Result<Output, std::io::Error>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::future::Future` is not implemented for `Result<Output, std::io::Error>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `tokio::time::Timeout<Result<Output, std::io::Error>>` to implement `std::future::Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `tokio::time::Timeout<Result<Output, std::io::Error>>` to implement `IntoFuture`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the `.await`","code":null,"level":"help","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":10788,"byte_end":10794,"line_start":294,"line_end":294,"column_start":73,"column_end":79,"is_primary":true,"text":[{"text":"        let output = timeout(timeout_duration, child.wait_with_output()).await","highlight_start":73,"highlight_end":79}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\security\\isolation.rs:294:74: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m: `Result<Output, std::io::Error>` is not a future: `Result<Output, std::io::Error>` is not a future\u001b[0m\n"}
{"$message_type":"diagnostic","message":"`Result<Output, std::io::Error>` is not a future","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":10737,"byte_end":10788,"line_start":294,"line_end":294,"column_start":22,"column_end":73,"is_primary":true,"text":[{"text":"        let output = timeout(timeout_duration, child.wait_with_output()).await","highlight_start":22,"highlight_end":73}],"label":"`Result<Output, std::io::Error>` is not a future","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::future::Future` is not implemented for `Result<Output, std::io::Error>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<Output, std::io::Error>` to implement `IntoFuture`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\security\\isolation.rs:294:22: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m: `Result<Output, std::io::Error>` is not a future: `Result<Output, std::io::Error>` is not a future\u001b[0m\n"}
{"$message_type":"diagnostic","message":"the trait `communication::CommandExecutor` is not dyn compatible","code":{"code":"E0038","explanation":"For any given trait `Trait` there may be a related _type_ called the _trait\nobject type_ which is typically written as `dyn Trait`. In earlier editions of\nRust, trait object types were written as plain `Trait` (just the name of the\ntrait, written in type positions) but this was a bit too confusing, so we now\nwrite `dyn Trait`.\n\nSome traits are not allowed to be used as trait object types. The traits that\nare allowed to be used as trait object types are called \"dyn-compatible\"[^1]\ntraits. Attempting to use a trait object type for a trait that is not\ndyn-compatible will trigger error E0038.\n\nTwo general aspects of trait object types give rise to the restrictions:\n\n  1. Trait object types are dynamically sized types (DSTs), and trait objects of\n     these types can only be accessed through pointers, such as `&dyn Trait` or\n     `Box<dyn Trait>`. The size of such a pointer is known, but the size of the\n     `dyn Trait` object pointed-to by the pointer is _opaque_ to code working\n     with it, and different trait objects with the same trait object type may\n     have different sizes.\n\n  2. The pointer used to access a trait object is paired with an extra pointer\n     to a \"virtual method table\" or \"vtable\", which is used to implement dynamic\n     dispatch to the object's implementations of the trait's methods. There is a\n     single such vtable for each trait implementation, but different trait\n     objects with the same trait object type may point to vtables from different\n     implementations.\n\nThe specific conditions that violate dyn-compatibility follow, most of which\nrelate to missing size information and vtable polymorphism arising from these\naspects.\n\n[^1]: Formerly known as \"object-safe\".\n\n### The trait requires `Self: Sized`\n\nTraits that are declared as `Trait: Sized` or which otherwise inherit a\nconstraint of `Self:Sized` are not dyn-compatible.\n\nThe reasoning behind this is somewhat subtle. It derives from the fact that Rust\nrequires (and defines) that every trait object type `dyn Trait` automatically\nimplements `Trait`. Rust does this to simplify error reporting and ease\ninteroperation between static and dynamic polymorphism. For example, this code\nworks:\n\n```\ntrait Trait {\n}\n\nfn static_foo<T:Trait + ?Sized>(b: &T) {\n}\n\nfn dynamic_bar(a: &dyn Trait) {\n    static_foo(a)\n}\n```\n\nThis code works because `dyn Trait`, if it exists, always implements `Trait`.\n\nHowever as we know, any `dyn Trait` is also unsized, and so it can never\nimplement a sized trait like `Trait:Sized`. So, rather than allow an exception\nto the rule that `dyn Trait` always implements `Trait`, Rust chooses to prohibit\nsuch a `dyn Trait` from existing at all.\n\nOnly unsized traits are considered dyn-compatible.\n\nGenerally, `Self: Sized` is used to indicate that the trait should not be used\nas a trait object. If the trait comes from your own crate, consider removing\nthis restriction.\n\n### Method references the `Self` type in its parameters or return type\n\nThis happens when a trait has a method like the following:\n\n```\ntrait Trait {\n    fn foo(&self) -> Self;\n}\n\nimpl Trait for String {\n    fn foo(&self) -> Self {\n        \"hi\".to_owned()\n    }\n}\n\nimpl Trait for u8 {\n    fn foo(&self) -> Self {\n        1\n    }\n}\n```\n\n(Note that `&self` and `&mut self` are okay, it's additional `Self` types which\ncause this problem.)\n\nIn such a case, the compiler cannot predict the return type of `foo()` in a\nsituation like the following:\n\n```compile_fail,E0038\ntrait Trait {\n    fn foo(&self) -> Self;\n}\n\nfn call_foo(x: Box<dyn Trait>) {\n    let y = x.foo(); // What type is y?\n    // ...\n}\n```\n\nIf only some methods aren't dyn-compatible, you can add a `where Self: Sized`\nbound on them to mark them as explicitly unavailable to trait objects. The\nfunctionality will still be available to all other implementers, including\n`Box<dyn Trait>` which is itself sized (assuming you `impl Trait for Box<dyn\nTrait>`).\n\n```\ntrait Trait {\n    fn foo(&self) -> Self where Self: Sized;\n    // more functions\n}\n```\n\nNow, `foo()` can no longer be called on a trait object, but you will now be\nallowed to make a trait object, and that will be able to call any dyn-compatible\nmethods. With such a bound, one can still call `foo()` on types implementing\nthat trait that aren't behind trait objects.\n\n### Method has generic type parameters\n\nAs mentioned before, trait objects contain pointers to method tables. So, if we\nhave:\n\n```\ntrait Trait {\n    fn foo(&self);\n}\n\nimpl Trait for String {\n    fn foo(&self) {\n        // implementation 1\n    }\n}\n\nimpl Trait for u8 {\n    fn foo(&self) {\n        // implementation 2\n    }\n}\n// ...\n```\n\nAt compile time each implementation of `Trait` will produce a table containing\nthe various methods (and other items) related to the implementation, which will\nbe used as the virtual method table for a `dyn Trait` object derived from that\nimplementation.\n\nThis works fine, but when the method gains generic parameters, we can have a\nproblem.\n\nUsually, generic parameters get _monomorphized_. For example, if I have\n\n```\nfn foo<T>(x: T) {\n    // ...\n}\n```\n\nThe machine code for `foo::<u8>()`, `foo::<bool>()`, `foo::<String>()`, or any\nother instantiation is different. Hence the compiler generates the\nimplementation on-demand. If you call `foo()` with a `bool` parameter, the\ncompiler will only generate code for `foo::<bool>()`. When we have additional\ntype parameters, the number of monomorphized implementations the compiler\ngenerates does not grow drastically, since the compiler will only generate an\nimplementation if the function is called with fully concrete arguments\n(i.e., arguments which do not contain any generic parameters).\n\nHowever, with trait objects we have to make a table containing _every_ object\nthat implements the trait. Now, if it has type parameters, we need to add\nimplementations for every type that implements the trait, and there could\ntheoretically be an infinite number of types.\n\nFor example, with:\n\n```\ntrait Trait {\n    fn foo<T>(&self, on: T);\n    // more methods\n}\n\nimpl Trait for String {\n    fn foo<T>(&self, on: T) {\n        // implementation 1\n    }\n}\n\nimpl Trait for u8 {\n    fn foo<T>(&self, on: T) {\n        // implementation 2\n    }\n}\n\n// 8 more implementations\n```\n\nNow, if we have the following code:\n\n```compile_fail,E0038\n# trait Trait { fn foo<T>(&self, on: T); }\n# impl Trait for String { fn foo<T>(&self, on: T) {} }\n# impl Trait for u8 { fn foo<T>(&self, on: T) {} }\n# impl Trait for bool { fn foo<T>(&self, on: T) {} }\n# // etc.\nfn call_foo(thing: Box<dyn Trait>) {\n    thing.foo(true); // this could be any one of the 8 types above\n    thing.foo(1);\n    thing.foo(\"hello\");\n}\n```\n\nWe don't just need to create a table of all implementations of all methods of\n`Trait`, we need to create such a table, for each different type fed to\n`foo()`. In this case this turns out to be (10 types implementing `Trait`)\\*(3\ntypes being fed to `foo()`) = 30 implementations!\n\nWith real world traits these numbers can grow drastically.\n\nTo fix this, it is suggested to use a `where Self: Sized` bound similar to the\nfix for the sub-error above if you do not intend to call the method with type\nparameters:\n\n```\ntrait Trait {\n    fn foo<T>(&self, on: T) where Self: Sized;\n    // more methods\n}\n```\n\nIf this is not an option, consider replacing the type parameter with another\ntrait object (e.g., if `T: OtherTrait`, use `on: Box<dyn OtherTrait>`). If the\nnumber of types you intend to feed to this method is limited, consider manually\nlisting out the methods of different types.\n\n### Method has no receiver\n\nMethods that do not take a `self` parameter can't be called since there won't be\na way to get a pointer to the method table for them.\n\n```\ntrait Foo {\n    fn foo() -> u8;\n}\n```\n\nThis could be called as `<Foo as Foo>::foo()`, which would not be able to pick\nan implementation.\n\nAdding a `Self: Sized` bound to these methods will generally make this compile.\n\n```\ntrait Foo {\n    fn foo() -> u8 where Self: Sized;\n}\n```\n\n### Trait contains associated constants\n\nJust like static functions, associated constants aren't stored on the method\ntable. If the trait or any subtrait contain an associated constant, they are not\ndyn compatible.\n\n```compile_fail,E0038\ntrait Foo {\n    const X: i32;\n}\n\nimpl dyn Foo {}\n```\n\nA simple workaround is to use a helper method instead:\n\n```\ntrait Foo {\n    fn x(&self) -> i32;\n}\n```\n\n### Trait uses `Self` as a type parameter in the supertrait listing\n\nThis is similar to the second sub-error, but subtler. It happens in situations\nlike the following:\n\n```compile_fail,E0038\ntrait Super<A: ?Sized> {}\n\ntrait Trait: Super<Self> {\n}\n\nstruct Foo;\n\nimpl Super<Foo> for Foo{}\n\nimpl Trait for Foo {}\n\nfn main() {\n    let x: Box<dyn Trait>;\n}\n```\n\nHere, the supertrait might have methods as follows:\n\n```\ntrait Super<A: ?Sized> {\n    fn get_a(&self) -> &A; // note that this is dyn-compatible!\n}\n```\n\nIf the trait `Trait` was deriving from something like `Super<String>` or\n`Super<T>` (where `Foo` itself is `Foo<T>`), this is okay, because given a type\n`get_a()` will definitely return an object of that type.\n\nHowever, if it derives from `Super<Self>`, even though `Super` is\ndyn-compatible, the method `get_a()` would return an object of unknown type when\ncalled on the function. `Self` type parameters let us make dyn-compatible traits\nno longer compatible, so they are forbidden when specifying supertraits.\n\nThere's no easy fix for this. Generally, code will need to be refactored so that\nyou no longer need to derive from `Super<Self>`.\n"},"level":"error","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":1519,"byte_end":1538,"line_start":48,"line_end":48,"column_start":34,"column_end":53,"is_primary":true,"text":[{"text":"    command_executor: Option<Arc<dyn CommandExecutor>>, // TODO: Implement CommandExecutor","highlight_start":34,"highlight_end":53}],"label":"`communication::CommandExecutor` is not dyn compatible","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for a trait to be dyn compatible it needs to allow building a vtable\nfor more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>","code":null,"level":"note","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":1724,"byte_end":1739,"line_start":53,"line_end":53,"column_start":11,"column_end":26,"is_primary":false,"text":[{"text":"pub trait CommandExecutor: Send + Sync {","highlight_start":11,"highlight_end":26}],"label":"this trait is not dyn compatible...","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\protocol\\communication.rs","byte_start":1808,"byte_end":1867,"line_start":54,"line_end":54,"column_start":53,"column_end":112,"is_primary":true,"text":[{"text":"    fn execute(&self, request: ExecutionRequest) -> impl std::future::Future<Output = ExecutionResponse> + Send;","highlight_start":53,"highlight_end":112}],"label":"...because method `execute` references an `impl Trait` type in its return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\protocol\\communication.rs","byte_start":1808,"byte_end":1867,"line_start":54,"line_end":54,"column_start":53,"column_end":112,"is_primary":false,"text":[{"text":"    fn execute(&self, request: ExecutionRequest) -> impl std::future::Future<Output = ExecutionResponse> + Send;","highlight_start":53,"highlight_end":112}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `impl Trait`","def_site_span":{"file_name":"src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider moving `execute` to another trait","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"only type `executors::command::CommandExecutor` implements `communication::CommandExecutor` within this crate; consider using it directly instead.","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`communication::CommandExecutor` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\protocol\\communication.rs:48:34: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror[E0038]\u001b[0m\u001b[0m: the trait `communication::CommandExecutor` is not dyn compatible: `communication::CommandExecutor` is not dyn compatible\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused variable: `message`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":12936,"byte_end":12943,"line_start":340,"line_end":340,"column_start":38,"column_end":45,"is_primary":true,"text":[{"text":"    async fn handle_heartbeat(&self, message: &ExecutionMessage) -> Result<ExecutionMessage, CommunicationError> {","highlight_start":38,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":12936,"byte_end":12943,"line_start":340,"line_end":340,"column_start":38,"column_end":45,"is_primary":true,"text":[{"text":"    async fn handle_heartbeat(&self, message: &ExecutionMessage) -> Result<ExecutionMessage, CommunicationError> {","highlight_start":38,"highlight_end":45}],"label":null,"suggested_replacement":"_message","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\protocol\\communication.rs:340:38: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused variable: `message`: help: if this is intentional, prefix it with an underscore: `_message`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"use of unstable library feature `duration_constructors`","code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\n#[repr(u128)] // error: use of unstable library feature 'repr128'\nenum Foo {\n    Bar(u64),\n}\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(repr128)]\n\n#[repr(u128)] // ok!\nenum Foo {\n    Bar(u64),\n}\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":16175,"byte_end":16195,"line_start":414,"line_end":414,"column_start":19,"column_end":39,"is_primary":true,"text":[{"text":"            age < Duration::from_hours(1) // Sessions expire after 1 hour of inactivity","highlight_start":19,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #120301 <https://github.com/rust-lang/rust/issues/120301> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\protocol\\communication.rs:414:19: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror[E0658]\u001b[0m\u001b[0m: use of unstable library feature `duration_constructors`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused variable: `request`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":15801,"byte_end":15808,"line_start":407,"line_end":407,"column_start":65,"column_end":72,"is_primary":true,"text":[{"text":"    async fn validate_session_security(&self, session_id: &str, request: &ExecutionRequest) -> bool {","highlight_start":65,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":15801,"byte_end":15808,"line_start":407,"line_end":407,"column_start":65,"column_end":72,"is_primary":true,"text":[{"text":"    async fn validate_session_security(&self, session_id: &str, request: &ExecutionRequest) -> bool {","highlight_start":65,"highlight_end":72}],"label":null,"suggested_replacement":"_request","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\protocol\\communication.rs:407:65: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused variable: `request`: help: if this is intentional, prefix it with an underscore: `_request`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"use of unstable library feature `duration_constructors`","code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\n#[repr(u128)] // error: use of unstable library feature 'repr128'\nenum Foo {\n    Bar(u64),\n}\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(repr128)]\n\n#[repr(u128)] // ok!\nenum Foo {\n    Bar(u64),\n}\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":16607,"byte_end":16627,"line_start":425,"line_end":425,"column_start":31,"column_end":51,"is_primary":true,"text":[{"text":"        let expiry_duration = Duration::from_hours(1);","highlight_start":31,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see issue #120301 <https://github.com/rust-lang/rust/issues/120301> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\protocol\\communication.rs:425:31: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror[E0658]\u001b[0m\u001b[0m: use of unstable library feature `duration_constructors`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `isolation::IsolationError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\executors\\filesystem.rs","byte_start":4934,"byte_end":4977,"line_start":139,"line_end":139,"column_start":21,"column_end":64,"is_primary":false,"text":[{"text":"            Ok(self.execute_operation_internal(operation_clone)?)","highlight_start":21,"highlight_end":64}],"label":"this can't be annotated with `?` because it has type `Result<_, FileSystemError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\executors\\filesystem.rs","byte_start":4977,"byte_end":4978,"line_start":139,"line_end":139,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            Ok(self.execute_operation_internal(operation_clone)?)","highlight_start":64,"highlight_end":65}],"label":"the trait `From<FileSystemError>` is not implemented for `isolation::IsolationError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\executors\\filesystem.rs","byte_start":4977,"byte_end":4978,"line_start":139,"line_end":139,"column_start":64,"column_end":65,"is_primary":false,"text":[{"text":"            Ok(self.execute_operation_internal(operation_clone)?)","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`isolation::IsolationError` needs to implement `From<FileSystemError>`","code":null,"level":"note","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":730,"byte_end":753,"line_start":24,"line_end":24,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"pub enum IsolationError {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"alternatively, `FileSystemError` needs to implement `Into<isolation::IsolationError>`","code":null,"level":"note","spans":[{"file_name":"src\\executors\\filesystem.rs","byte_start":424,"byte_end":448,"line_start":12,"line_end":12,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"pub enum FileSystemError {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  `isolation::IsolationError` implements `From<capabilities::SecurityError>`\n  `isolation::IsolationError` implements `From<std::io::Error>`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\executors\\filesystem.rs:139:64: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m: `?` couldn't convert the error to `isolation::IsolationError`: the trait `From<FileSystemError>` is not implemented for `isolation::IsolationError`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `isolation::IsolationError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\executors\\command.rs","byte_start":6587,"byte_end":6626,"line_start":165,"line_end":165,"column_start":21,"column_end":60,"is_primary":false,"text":[{"text":"            Ok(self.execute_command_internal(request_clone)?)","highlight_start":21,"highlight_end":60}],"label":"this can't be annotated with `?` because it has type `Result<_, CommandExecutionError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\executors\\command.rs","byte_start":6626,"byte_end":6627,"line_start":165,"line_end":165,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"            Ok(self.execute_command_internal(request_clone)?)","highlight_start":60,"highlight_end":61}],"label":"the trait `From<CommandExecutionError>` is not implemented for `isolation::IsolationError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\executors\\command.rs","byte_start":6626,"byte_end":6627,"line_start":165,"line_end":165,"column_start":60,"column_end":61,"is_primary":false,"text":[{"text":"            Ok(self.execute_command_internal(request_clone)?)","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`isolation::IsolationError` needs to implement `From<CommandExecutionError>`","code":null,"level":"note","spans":[{"file_name":"src\\security\\isolation.rs","byte_start":730,"byte_end":753,"line_start":24,"line_end":24,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"pub enum IsolationError {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"alternatively, `CommandExecutionError` needs to implement `Into<isolation::IsolationError>`","code":null,"level":"note","spans":[{"file_name":"src\\executors\\command.rs","byte_start":558,"byte_end":588,"line_start":14,"line_end":14,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"pub enum CommandExecutionError {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  `isolation::IsolationError` implements `From<capabilities::SecurityError>`\n  `isolation::IsolationError` implements `From<std::io::Error>`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\executors\\command.rs:165:60: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m: `?` couldn't convert the error to `isolation::IsolationError`: the trait `From<CommandExecutionError>` is not implemented for `isolation::IsolationError`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"the trait `communication::CommandExecutor` is not dyn compatible","code":{"code":"E0038","explanation":"For any given trait `Trait` there may be a related _type_ called the _trait\nobject type_ which is typically written as `dyn Trait`. In earlier editions of\nRust, trait object types were written as plain `Trait` (just the name of the\ntrait, written in type positions) but this was a bit too confusing, so we now\nwrite `dyn Trait`.\n\nSome traits are not allowed to be used as trait object types. The traits that\nare allowed to be used as trait object types are called \"dyn-compatible\"[^1]\ntraits. Attempting to use a trait object type for a trait that is not\ndyn-compatible will trigger error E0038.\n\nTwo general aspects of trait object types give rise to the restrictions:\n\n  1. Trait object types are dynamically sized types (DSTs), and trait objects of\n     these types can only be accessed through pointers, such as `&dyn Trait` or\n     `Box<dyn Trait>`. The size of such a pointer is known, but the size of the\n     `dyn Trait` object pointed-to by the pointer is _opaque_ to code working\n     with it, and different trait objects with the same trait object type may\n     have different sizes.\n\n  2. The pointer used to access a trait object is paired with an extra pointer\n     to a \"virtual method table\" or \"vtable\", which is used to implement dynamic\n     dispatch to the object's implementations of the trait's methods. There is a\n     single such vtable for each trait implementation, but different trait\n     objects with the same trait object type may point to vtables from different\n     implementations.\n\nThe specific conditions that violate dyn-compatibility follow, most of which\nrelate to missing size information and vtable polymorphism arising from these\naspects.\n\n[^1]: Formerly known as \"object-safe\".\n\n### The trait requires `Self: Sized`\n\nTraits that are declared as `Trait: Sized` or which otherwise inherit a\nconstraint of `Self:Sized` are not dyn-compatible.\n\nThe reasoning behind this is somewhat subtle. It derives from the fact that Rust\nrequires (and defines) that every trait object type `dyn Trait` automatically\nimplements `Trait`. Rust does this to simplify error reporting and ease\ninteroperation between static and dynamic polymorphism. For example, this code\nworks:\n\n```\ntrait Trait {\n}\n\nfn static_foo<T:Trait + ?Sized>(b: &T) {\n}\n\nfn dynamic_bar(a: &dyn Trait) {\n    static_foo(a)\n}\n```\n\nThis code works because `dyn Trait`, if it exists, always implements `Trait`.\n\nHowever as we know, any `dyn Trait` is also unsized, and so it can never\nimplement a sized trait like `Trait:Sized`. So, rather than allow an exception\nto the rule that `dyn Trait` always implements `Trait`, Rust chooses to prohibit\nsuch a `dyn Trait` from existing at all.\n\nOnly unsized traits are considered dyn-compatible.\n\nGenerally, `Self: Sized` is used to indicate that the trait should not be used\nas a trait object. If the trait comes from your own crate, consider removing\nthis restriction.\n\n### Method references the `Self` type in its parameters or return type\n\nThis happens when a trait has a method like the following:\n\n```\ntrait Trait {\n    fn foo(&self) -> Self;\n}\n\nimpl Trait for String {\n    fn foo(&self) -> Self {\n        \"hi\".to_owned()\n    }\n}\n\nimpl Trait for u8 {\n    fn foo(&self) -> Self {\n        1\n    }\n}\n```\n\n(Note that `&self` and `&mut self` are okay, it's additional `Self` types which\ncause this problem.)\n\nIn such a case, the compiler cannot predict the return type of `foo()` in a\nsituation like the following:\n\n```compile_fail,E0038\ntrait Trait {\n    fn foo(&self) -> Self;\n}\n\nfn call_foo(x: Box<dyn Trait>) {\n    let y = x.foo(); // What type is y?\n    // ...\n}\n```\n\nIf only some methods aren't dyn-compatible, you can add a `where Self: Sized`\nbound on them to mark them as explicitly unavailable to trait objects. The\nfunctionality will still be available to all other implementers, including\n`Box<dyn Trait>` which is itself sized (assuming you `impl Trait for Box<dyn\nTrait>`).\n\n```\ntrait Trait {\n    fn foo(&self) -> Self where Self: Sized;\n    // more functions\n}\n```\n\nNow, `foo()` can no longer be called on a trait object, but you will now be\nallowed to make a trait object, and that will be able to call any dyn-compatible\nmethods. With such a bound, one can still call `foo()` on types implementing\nthat trait that aren't behind trait objects.\n\n### Method has generic type parameters\n\nAs mentioned before, trait objects contain pointers to method tables. So, if we\nhave:\n\n```\ntrait Trait {\n    fn foo(&self);\n}\n\nimpl Trait for String {\n    fn foo(&self) {\n        // implementation 1\n    }\n}\n\nimpl Trait for u8 {\n    fn foo(&self) {\n        // implementation 2\n    }\n}\n// ...\n```\n\nAt compile time each implementation of `Trait` will produce a table containing\nthe various methods (and other items) related to the implementation, which will\nbe used as the virtual method table for a `dyn Trait` object derived from that\nimplementation.\n\nThis works fine, but when the method gains generic parameters, we can have a\nproblem.\n\nUsually, generic parameters get _monomorphized_. For example, if I have\n\n```\nfn foo<T>(x: T) {\n    // ...\n}\n```\n\nThe machine code for `foo::<u8>()`, `foo::<bool>()`, `foo::<String>()`, or any\nother instantiation is different. Hence the compiler generates the\nimplementation on-demand. If you call `foo()` with a `bool` parameter, the\ncompiler will only generate code for `foo::<bool>()`. When we have additional\ntype parameters, the number of monomorphized implementations the compiler\ngenerates does not grow drastically, since the compiler will only generate an\nimplementation if the function is called with fully concrete arguments\n(i.e., arguments which do not contain any generic parameters).\n\nHowever, with trait objects we have to make a table containing _every_ object\nthat implements the trait. Now, if it has type parameters, we need to add\nimplementations for every type that implements the trait, and there could\ntheoretically be an infinite number of types.\n\nFor example, with:\n\n```\ntrait Trait {\n    fn foo<T>(&self, on: T);\n    // more methods\n}\n\nimpl Trait for String {\n    fn foo<T>(&self, on: T) {\n        // implementation 1\n    }\n}\n\nimpl Trait for u8 {\n    fn foo<T>(&self, on: T) {\n        // implementation 2\n    }\n}\n\n// 8 more implementations\n```\n\nNow, if we have the following code:\n\n```compile_fail,E0038\n# trait Trait { fn foo<T>(&self, on: T); }\n# impl Trait for String { fn foo<T>(&self, on: T) {} }\n# impl Trait for u8 { fn foo<T>(&self, on: T) {} }\n# impl Trait for bool { fn foo<T>(&self, on: T) {} }\n# // etc.\nfn call_foo(thing: Box<dyn Trait>) {\n    thing.foo(true); // this could be any one of the 8 types above\n    thing.foo(1);\n    thing.foo(\"hello\");\n}\n```\n\nWe don't just need to create a table of all implementations of all methods of\n`Trait`, we need to create such a table, for each different type fed to\n`foo()`. In this case this turns out to be (10 types implementing `Trait`)\\*(3\ntypes being fed to `foo()`) = 30 implementations!\n\nWith real world traits these numbers can grow drastically.\n\nTo fix this, it is suggested to use a `where Self: Sized` bound similar to the\nfix for the sub-error above if you do not intend to call the method with type\nparameters:\n\n```\ntrait Trait {\n    fn foo<T>(&self, on: T) where Self: Sized;\n    // more methods\n}\n```\n\nIf this is not an option, consider replacing the type parameter with another\ntrait object (e.g., if `T: OtherTrait`, use `on: Box<dyn OtherTrait>`). If the\nnumber of types you intend to feed to this method is limited, consider manually\nlisting out the methods of different types.\n\n### Method has no receiver\n\nMethods that do not take a `self` parameter can't be called since there won't be\na way to get a pointer to the method table for them.\n\n```\ntrait Foo {\n    fn foo() -> u8;\n}\n```\n\nThis could be called as `<Foo as Foo>::foo()`, which would not be able to pick\nan implementation.\n\nAdding a `Self: Sized` bound to these methods will generally make this compile.\n\n```\ntrait Foo {\n    fn foo() -> u8 where Self: Sized;\n}\n```\n\n### Trait contains associated constants\n\nJust like static functions, associated constants aren't stored on the method\ntable. If the trait or any subtrait contain an associated constant, they are not\ndyn compatible.\n\n```compile_fail,E0038\ntrait Foo {\n    const X: i32;\n}\n\nimpl dyn Foo {}\n```\n\nA simple workaround is to use a helper method instead:\n\n```\ntrait Foo {\n    fn x(&self) -> i32;\n}\n```\n\n### Trait uses `Self` as a type parameter in the supertrait listing\n\nThis is similar to the second sub-error, but subtler. It happens in situations\nlike the following:\n\n```compile_fail,E0038\ntrait Super<A: ?Sized> {}\n\ntrait Trait: Super<Self> {\n}\n\nstruct Foo;\n\nimpl Super<Foo> for Foo{}\n\nimpl Trait for Foo {}\n\nfn main() {\n    let x: Box<dyn Trait>;\n}\n```\n\nHere, the supertrait might have methods as follows:\n\n```\ntrait Super<A: ?Sized> {\n    fn get_a(&self) -> &A; // note that this is dyn-compatible!\n}\n```\n\nIf the trait `Trait` was deriving from something like `Super<String>` or\n`Super<T>` (where `Foo` itself is `Foo<T>`), this is okay, because given a type\n`get_a()` will definitely return an object of that type.\n\nHowever, if it derives from `Super<Self>`, even though `Super` is\ndyn-compatible, the method `get_a()` would return an object of unknown type when\ncalled on the function. `Self` type parameters let us make dyn-compatible traits\nno longer compatible, so they are forbidden when specifying supertraits.\n\nThere's no easy fix for this. Generally, code will need to be refactored so that\nyou no longer need to derive from `Super<Self>`.\n"},"level":"error","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":2068,"byte_end":2072,"line_start":62,"line_end":62,"column_start":31,"column_end":35,"is_primary":true,"text":[{"text":"            command_executor: None,","highlight_start":31,"highlight_end":35}],"label":"`communication::CommandExecutor` is not dyn compatible","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for a trait to be dyn compatible it needs to allow building a vtable\nfor more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>","code":null,"level":"note","spans":[{"file_name":"src\\protocol\\communication.rs","byte_start":1724,"byte_end":1739,"line_start":53,"line_end":53,"column_start":11,"column_end":26,"is_primary":false,"text":[{"text":"pub trait CommandExecutor: Send + Sync {","highlight_start":11,"highlight_end":26}],"label":"this trait is not dyn compatible...","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\protocol\\communication.rs","byte_start":1808,"byte_end":1867,"line_start":54,"line_end":54,"column_start":53,"column_end":112,"is_primary":true,"text":[{"text":"    fn execute(&self, request: ExecutionRequest) -> impl std::future::Future<Output = ExecutionResponse> + Send;","highlight_start":53,"highlight_end":112}],"label":"...because method `execute` references an `impl Trait` type in its return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\protocol\\communication.rs","byte_start":1808,"byte_end":1867,"line_start":54,"line_end":54,"column_start":53,"column_end":112,"is_primary":false,"text":[{"text":"    fn execute(&self, request: ExecutionRequest) -> impl std::future::Future<Output = ExecutionResponse> + Send;","highlight_start":53,"highlight_end":112}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `impl Trait`","def_site_span":{"file_name":"src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider moving `execute` to another trait","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"only type `executors::command::CommandExecutor` implements `communication::CommandExecutor` within this crate; consider using it directly instead.","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`communication::CommandExecutor` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\protocol\\communication.rs:62:31: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror[E0038]\u001b[0m\u001b[0m: the trait `communication::CommandExecutor` is not dyn compatible: `communication::CommandExecutor` is not dyn compatible\u001b[0m\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `new` found for struct `RustExecutor` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":12892,"byte_end":12895,"line_start":353,"line_end":353,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"    RustExecutor::new()","highlight_start":19,"highlight_end":22}],"label":"function or associated item not found in `RustExecutor`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lib.rs","byte_start":800,"byte_end":823,"line_start":24,"line_end":24,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"pub struct RustExecutor {","highlight_start":1,"highlight_end":24}],"label":"function or associated item `new` not found for this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is implemented and in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait defines an item `new`, perhaps you need to implement it:\ncandidate #1: `parking_lot_core::thread_parker::ThreadParkerT`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\lib.rs:353:19: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m: no function or associated item named `new` found for struct `RustExecutor` in the current scope: function or associated item not found in `RustExecutor`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `new` found for struct `RustExecutor` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":13751,"byte_end":13754,"line_start":382,"line_end":382,"column_start":38,"column_end":41,"is_primary":true,"text":[{"text":"    let mut executor = RustExecutor::new()?;","highlight_start":38,"highlight_end":41}],"label":"function or associated item not found in `RustExecutor`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lib.rs","byte_start":800,"byte_end":823,"line_start":24,"line_end":24,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"pub struct RustExecutor {","highlight_start":1,"highlight_end":24}],"label":"function or associated item `new` not found for this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is implemented and in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait defines an item `new`, perhaps you need to implement it:\ncandidate #1: `parking_lot_core::thread_parker::ThreadParkerT`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\lib.rs:382:38: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m: no function or associated item named `new` found for struct `RustExecutor` in the current scope: function or associated item not found in `RustExecutor`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"unused variable: `timeout_duration`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\executors\\command.rs","byte_start":9527,"byte_end":9543,"line_start":243,"line_end":243,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"        let timeout_duration = Duration::from_millis(","highlight_start":13,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\executors\\command.rs","byte_start":9527,"byte_end":9543,"line_start":243,"line_end":243,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"        let timeout_duration = Duration::from_millis(","highlight_start":13,"highlight_end":29}],"label":null,"suggested_replacement":"_timeout_duration","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0msrc\\executors\\command.rs:243:13: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m: unused variable: `timeout_duration`: help: if this is intentional, prefix it with an underscore: `_timeout_duration`\u001b[0m\n"}
{"$message_type":"diagnostic","message":"aborting due to 26 previous errors; 24 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m: aborting due to 26 previous errors; 24 warnings emitted\u001b[0m\n"}
